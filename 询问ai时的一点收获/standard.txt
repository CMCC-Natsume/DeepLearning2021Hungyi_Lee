📁 推荐的项目结构
以下是一个典型的 Python 项目结构，适用于使用 uv 或其他现代工具（如 poetry、pdm）进行依赖管理和打包的项目：

csharp
复制
编辑
my_project/
├── pyproject.toml          # 项目元数据和依赖配置（PEP 621）
├── uv.lock                 # 由 uv 生成的锁定文件
├── README.md               # 项目说明文档
├── LICENSE                 # 许可证（如 MIT、Apache 2.0 等）
├── .gitignore              # Git 忽略文件配置
├── src/                    # 源代码目录
│   └── my_project/         # 主包目录，名称与项目一致
│       ├── __init__.py     # 初始化文件，标识为包
│       ├── main.py         # 主程序入口
│       ├── utils.py        # 工具函数模块
│       ├── config.py       # 配置文件
│       └── ...             # 其他模块
├── tests/                  # 测试代码目录
│   ├── __init__.py         # 初始化文件
│   └── test_main.py        # 测试主程序的模块
└── docs/                   # 项目文档目录
    └── index.md            # 文档首页
这种结构遵循了现代 Python 项目的最佳实践，便于维护和协作。

